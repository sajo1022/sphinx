Image acquisition module
=========================

This part of the documentation describes the module that is responsible for everything related
with the image acquisition, respective the setup of the **Helios2 ToF** camera.

------

Helios2 basics
----------------

The Helios2 is a Time of Flight camera by the manufacturer Lucid Vision Labs Inc. (https://thinklucid.com/de/ ).

The cameras diodes work on a wavelength of 850nm which is not suitable for outdoor operation. But as already mentioned,
the developed algorithms are not depended on the sensor that acquires the data but on the pointcloud / xyz-data only.

The camera communicates via the **GiGE Vision** protocol, which offers a vast variety of options to configure the camera.
For a collection of all the nodes that are available to configure your camera, please refer to the official
technical reference manual (https://support.thinklucid.com/helios2-hlt003s/#2352 )

Helios2 configuration
-----------------------

When the user wants to take an image with the Helios2, the first thing to do is to connect to the camera.
If your camera and your network is setup correctly as described in the :ref:`getting started guide <setup-helios2-system>`
this can be done by calling the function :py:meth:`create_devices_with_tries <image_processing_scripts.image_aquisition.create_devices_with_tries>`.

We used a setup that writes the created device as a global variable so the connection does not have to be established before each image.

After this, you can configure the device using nodes. The following code shows
the configuration used for the project, but there are many more options as mentioned above.

.. code-block:: python

    # Enable stream auto negotiate packet size  -------------------------------
    device.tl_stream_nodemap['StreamAutoNegotiatePacketSize'].value = True

    # Enable stream packet resend  --------------------------------------------
    device.tl_stream_nodemap['StreamPacketResendEnable'].value = True

    # Pixel format ------------------------------------------------------------
    device.nodemap['PixelFormat'].value = 'Coord3D_ABCY16'
    device.nodemap['Scan3dConfidenceThresholdMin'].value = 1000
    device.nodemap['Scan3dConfidenceThresholdEnable'].value = True

    # Delay between each package ----------------------------------------------
    device.nodemap['GevSCPD'].value = 8000

    # Set Aquisition Framerate  -----------------------------------------------
    device.nodemap['AcquisitionFrameRateEnable'].value = True
    device.nodemap['AcquisitionFrameRate'].value = 10.

    #setup trigger sources  ---------------------------------------------------
    device.tl_device_nodemap['ActionCommandDeviceKey'].value = 1
    device.tl_device_nodemap['ActionCommandGroupKey'].value = 1
    device.tl_device_nodemap['ActionCommandGroupMask'].value = 1
    device.tl_device_nodemap['ActionCommandExecuteTime'].value = 0

    # Inter - Packet Delay  ---------------------------------------------------
    device.nodemap['GevSCFTD'].value = 0
    device.nodemap['GevSCPSPacketSize'].value = 9000

    device.nodemap['Scan3dOperatingMode'].value = 'Distance3000mmSingleFreq'

The most important setting to be taken here are the ``PixelFormat`` which defines the image format (here 4-channel image
x-, y-, z-data and intensity),  the ``Scan3dConfidenceThresholdMin`` that works like a threshold that decides when to mark a
point as valid and the ``Scan3dOperatingMode``, which sets the operating distance for the camera. The camera is able to change operating
distances between 1.5m and 8m.

Acquire an image
------------------

To acquire an image the function :py:meth:`get_helios_image <image_processing_scripts.image_aquisition.get_helios_image>`` is used.
For this, the function tries to to use an already initialized device. If this fails the device will be reconnected.
Before reading an image (buffer) from the camera, ``device.start_stream()`` has to be called and used as context manager.
After that, the image can be read from the camera by using ``device.get_buffer()``. The ``coordinate_axis_info`` is needed to convert
the buffer data to real world data. This process will be described in the :ref:`next paragraph <converting-gray-values>`.

.. code-block:: python

        device = DEVICES[0]
        read_coordinate_info(device)
        coordinate_axis_info = COORDINATE_INFO  # used for converting to xyz values in millimeters

        with device.start_stream():
            buffer = device.get_buffer()
            get_xyzi_image(buffer, axis_info=coordinate_axis_info) # conversion of gray values to millimeter values


.. _converting-gray-values:

Converting gray values to millimeters
---------------------------------------
This paragraph will describe the purpose of the function ``get_xyzi_image``.

The "image" (buffer) of the Helios2 works with 16 bit grayscale values, meaning we have values between 0 and 65025.
To convert these values in millimeters, we need some kind of scaling factor. To also allow negative values (meaning the object
is left of the camera for x-values, or north of the camera for y-values), some kind of offset is needed. This will apply for both
the first and the second channel, containing the x-, and the y-data. The z-data, that describes the position of a point orthogonal
to the cameras optical axis, does not require an offset value, since the distance will always be positive. For better understanding,
the figure below shows a sketch of the cameras coordinate system.

.. figure:: images/camera_coord_sys.png
    :align: center
    :alt: Camera coordinate system

    Sketch of the camera coordinate system (source: own image)

The offset and scaling values Ä‡an be read from the camera by calling the function ``read_coordinate_info``. To see what this
function does, lookup the :py:meth:`function description <image_processing_scripts.image_aquisition.read_coordinate_info>`.

The conversion itself is performed by the following code:

.. code-block:: python

    # restructure buffer data and apply conversion to millimeter values
    pdata_16bit = ctypes.cast(buffer.pdata, ctypes.POINTER(ctypes.c_uint16))

    image_x = Image.fromarray(np.ctypeslib.as_array(pdata_16bit[0:480 * 640 * 4:4]).reshape((480, 640))
                              * axis_info['scale_factor'][0] + axis_info['axis_offset'][0])
    image_y = Image.fromarray(np.ctypeslib.as_array(pdata_16bit[1:480 * 640 * 4:4]).reshape((480, 640))
                              * axis_info['scale_factor'][1] + axis_info['axis_offset'][1])
    image_z = Image.fromarray(np.ctypeslib.as_array(pdata_16bit[2:480 * 640 * 4:4]).reshape((480, 640))
                              * axis_info['scale_factor'][2] + axis_info['axis_offset'][2])
    image_intensity = Image.fromarray((np.ctypeslib.as_array(pdata_16bit[3:480 * 640 * 4:4]).reshape((480, 640))).astype(np.uint32))


The images will then be saved to ``.temp_images/`` directory, where they will later be read from by the correct image processing
procedure.

.. code-block:: python

    #save image to temp_image to read it in halcon later
    image_x.save(f'{os.getcwd()}/include/image_processing_scripts/.temp_images/HLT_X.tiff')
    image_y.save(f'{os.getcwd()}/include/image_processing_scripts/.temp_images/HLT_Y.tiff')
    image_z.save(f'{os.getcwd()}/include/image_processing_scripts/.temp_images/HLT_Z.tiff')
    image_intensity.save(f'{os.getcwd()}/include/image_processing_scripts/.temp_images/Intensity_Image.png')


Image acquisition function description (docstrings)
-----------------------------------------------------

.. automodule:: image_processing_scripts.image_aquisition
   :members: