ROS2
==================

------

The communication between the different docker containers within the entire system of the "MauRob40" project is based on ROS2 Foxy.
ROS2 has multiple ways for communication. In this project the main way of communication is by services. To use a service, the node that provides the service (e.g. image_acquisition service) must be spun.
The service can be called by a client. The client sends a request to the service and receives a specified response.

Camera Nodes and services
---------------------------

To simplify the usage and development of further projects using either the helios2 or blaze101 camera, ROS2 drivers
have been written for both.

They both provide a service called **acquire_image** that relies on custom services contained in the **image_processing_interfaces** ros2 package.
The custom service is called **PointcloudIntensity**. It takes no input because it acts like a trigger for the camera and returns
both the pointcloud and the corresponding intensity values. The pointcloud is a array of type **geometry_msgs/Point** and the intensity values
an array of type **float32**.

------

Image Processing Node
----------------------

The developed image processing node provides two services. One service called **locate_standard_stones** and another service called **locate_fitting_stones**. They also rely on custom services defined in the **image_processing_interfaces** package.

**locate_standard_stones** takes a pointcloud as described earlier as an input, runs the image processing algorithm and returns an array of 6D poses as
ros2 standard msg **geometry_msgs/Pose**. It's the 6D poses of all located stones relative to the camera.

Same thing applies for the **locate_fitting_stones** service, only that it also requires the intensity_values as input.

------

General idea of workflow
--------------------------

The general idea of the workflow is the following:

1. Start up all necessary ros nodes

CAMERA:

.. code-block:: bash

    ros2 run blaze101_driver blaze101

or

.. code-block:: bash

    ros2 run helios2_driver helios2

depending on the camera you want to use.

IMAGE PROCESSING:

.. code-block:: bash

    ros2 run image_processing image_processing_service_node

All required services are now up and running.

2. Run the example client provided in the project. This has later to be implemented correctly by the coordinator.

.. code-block:: bash

    ros2 run image_processing locate_standard_stones

This will read a pointcloud from saved images and request a stone position from the **locate_standard_stone** service.