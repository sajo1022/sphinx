This section of the documentation will walk you through the developed application to help navigate
through the different parts. It will start by explaining the projects
structure and some thoughts behind it.

Also the project was developed on Ubuntu 20.04 LTS so all commands are for linux users and can differ from windows commands.

Project structure
==================

------

In the projects source directory ``image_processing/`` you will find the following high level structure:

.. code::

    ├── .git/                   # git
    ├── docs                    # sphinx project documentation
    ├── example_images
    ├── otherFiles
    ├── src                     # actual project
    ├── Dockerfile              # docker
    ├── README.md
    ├── .gitignore              # git
    ├── .gitmodules             # git
    ├── start_docker.sh         # docker
    └── access_container.sh     # docker


Git files
---------

In case you cloned this project from gitLab, you will also find the ``.git/`` directory. While .git/ is managed by gitLab
on its own and does not have to be changed at any time, the ``.gitignore`` file might be important when contributing to the project.
There you can indicate which files should not be tracked and later pushed from your local machine to gitLab.
In order to increase the modularity of the development, developed software packages are now independent git repositories.
To use these repositories within the repository of this project, they have to be implemented as submodules.
The configuration of these submodules is done in the ``.gitmodules`` file.

Docker files
------------

The ``Dockerfile`` is used to build the docker image. The building process can be manually called by typing

.. code-block:: bash

    docker build

when in the same directory or by executing

.. code-block:: bash

    . start_docker.sh

to automatically build the image and start the container with the correct settings. This option is recommended.

If the container is already built, you can access it without building again by executing

.. code-block:: bash

    . access_container.sh

Docs/ folder
------------

The ``docs/`` directory holds all the necessary files to build this documentation using *sphinx*.
The basic structure is the following:

.. code::

    ├── ...
    ├── docs/                       # sphinx project documentation
    │ ├── folders for sections
    │ │ ├── images/                 # images used in the section
    │ │ └──  *.rst                  # rst-files with the contents of a section
    │ ├── ...
    │ ├── _build/
    │ │ ├── ...
    │ │ ├── html/
    │ │ │ ├── ...
    │ │ │ ├── index.html            # Actual documentation in html
    │ │ │ └── ...
    │ ├── conf.py                   # configuration file
    │ ├── index.rst                 # start_file
    │ └── ...
    └── ...

To contribute to the documentation, just add the content to the correct ``.rst`` in one of the section folders.
After you added your content you can call:

.. code-block:: bash

    make clean html

in the ``docs/`` directory. The html file created can be found under ``docs/_build/html/index.html``.
For further information refer to the official :ref:`sphinx documentation <sphinx-documentation>`.

The src folder
--------------

The ``src/`` directory contains the actual project. Everything in this folder will also be available in the docker container.

.. code::

    .../src/
        ├── blaze101_driver                 # camera driver
        ├── eval_images                     # evaluation images
        ├── helios2_driver                  # camera driver
        ├── image_processing                # ros client/node and code
        └── image_processing_interfaces     # ros service descriptions

Camera drivers
--------------

The camera drivers ``blaze101_driver`` and ``helios2_driver`` are specific ros packages which allow to communicate and trigger
the used cameras "Basler Blaze 101" and "LucidVision Helios2". The corresponding driver is used to acquire images.

Ros service descriptions
------------------------

The ``image_processing_interfaces`` directory represents another ros package. It contains the definitions of all services used in the
process.

.. code::

    .../image_processing_interfaces/
        ├── CMakeLists.txt
        ├── package.xml
        └── srv
            ├── LocateFittingStone.srv
            ├── LocateStandardStone.srv
            ├── PointcloudIntensity.srv
            └── Pointcloud.srv

The image_processing folder
---------------------------

The ``image_processing`` directory is a ros package, which contains the actual image_processing scripts and necessary utils.

.. code::

    ../image_processing/
        ├── image_processing
        ├── utils
        ├── resource
        ├── setup.cfg
        ├── setup.py
        └── package.xml

In the ``utils/`` directory you can find different files for setting up dependencies as well as packages that need
to be installed in docker, that can't be installed any other way. There is a folder for each package, containing the
packages and some configurations that will be automatically executed when starting docker. These configurations mainly
deal with environment variables for the used api. If there are problems when executing the scripts in docker, this
would be the first location to check.

The ``image_processing`` folder contains the actual scripts of the image processing. Furthermore, it contains a ros image_processing_node
which provides the services ``LocateFittingStone`` and ``LocateStandardStone``.

.. code::

    ../image_processing/
        ├── config.py
        ├── fitting_stone.py
        ├── image_processing_dummy_client.py
        ├── image_processing_node.py
        ├── __init__.py
        ├── ip_utils.py
        ├── main.py
        ├── standard_stone.py
        └── visualization.py

The ``image_processing_dummy_client`` is used for development purposes only and will later be replaced by the general coordinator of the Maurob40 system.

There is one module for each stone type (standard and fitting), a module that contains everything camera related
and another module that is only needed when visualizing different steps of the program. The module ``ip_utils.py`` contains functions which do not
belong to a specific module.

The ``config.py`` file, takes the role of a "user interface" when setting up the stone localization. Here you can
configure for example which type of stone you are looking for, if you want to acquire images or read them from a disk or if the result should be visualized.
The application will then automatically coordinate through the code according to the users settings.

In the next section we will go through each module and see how the stone localization actually works.