.. _image-processing-operations:

Image processing operations
===========================

------

In this section some operations will be described that might be helpful in order to understand this projects image processing.
In addition to the theory, it will be shown how to perform them with halcons python api. This documentation only shows a fraction
of halcons possibilities and functions. For a comprehensive documentation of halcon, please refer to the
official documentation :ref:`here <halcon-documentation>`.

How to create a binary image (mask)
--------------------------------------
After reading the previous section on :ref:`binary images and masks <binary-masks>`, it should be already clear what they are used for.
This part of the documentation shows different ways to generate said mask or region.

.. _threshold-:

Threshold
^^^^^^^^^^^
One of the most common ways to get a mask for your image would be a simple **threshold**. The way a threshold works is
easy to understand. You define a value, where every pixel below this value will then be marked as 0 and every pixel above will
be marked as 1 (or vice versa). In an intensity image, this can be used to separate a dark object from a bright background. Just use
a threshold value somewhere in between the dark object and the bright background and you would get some useful mask to "cut" your object.

But often things are a little more tricky than separating a dark object from a bright background. What if the backgrounds intensity
isn't even or has dark spots to it? Or the object itself contains white areas, that are actually part of the object but would be
filtered out by a simple threshold?

There are many other more advanced types of thresholds like **dynamic threshold**, that takes the difference
of two versions of an image into account. For instance an image and a smoothed version of it. Another example
would be an **automatic threshold**, that automatically determines the maximum and minimum values of an image and
then applies a suitable threshold to it.

Thresholds are of existential importance to the project. Since we are not working with intensity images in this project, but
with pointclouds, a simple threshold gives us a very strong tool for image segmentation.

As already mentioned in the paragraph :ref:`Pointclouds <point-clouds>`, the third channel holds the points z-coordinate, which
is the distance of the point orthogonal to the cameras view. When separating this channel and viewing it on its own, our scene of the
previous section would look like this, with different gray values representing different *height levels*.

.. figure:: images/z_image_fitting_stone_pallet.png
    :align: center
    :alt: z image fitting stone pallet

    Isolated 3rd channel of fitting stone scene (*source:* own image)

One of the big advantages when working with 3d data of the Helios2 camera (or any 3d camera in general) is,
that you can work with images containing "real world data". The shown images gray values actually correspond to millimeters, meaning
a gray value of 2000 equals a distance of this pixel (or point if all 3 coordinates are used) of 2000 millimeters.
Pixels closer to the camera thus appear darker, because they have a lower gray value.

With this knowledge in mind, we can easily create a useful mask using only a simple threshold, without any preprocessing
necessary. Assuming the distance of the camera to the floor is known, we can apply a simple threshold, keeping all
values lower than the distance of the floor. This provides us with a mask separating all objects on the ground from the
ground itself. With some cleanup that doesn't belong in this chapter, we get exactly the mask or region shown previously
:ref:`here <pallet-region>`.

Applying a threshold in halcon is really simple. In addition to just one value, halcon allows to set an upper and
lower limit in which between all pixel will be selected.

.. code-block:: python

    output_region = threshold(input_image, min_gray, max_gray)

.. hint::
    Many functions in halcon also allow passing of multiple values in form of a list.
    For a threshold, the min and max gray values would look like this: [min1, min2], [max1, max2].
    The conditions are connected by a logical **or**.

.. _region-growing-methods:

Region growing methods
^^^^^^^^^^^^^^^^^^^^^^^
Another method of generating masks are region growing methods. Here several "seeds" are placed in the image.
This can happen randomly or at predefined locations. From this seed, the mask then "grows", depending on different conditions.
This condition can depend on the gray values of the surrounding pixels. If a adjacent pixel to the mask has a similar gray value,
the pixel is added to the mask and so on. This can be useful if a object is always in the same location, but depending on
the lighting changes gray values from image to image.

A further option that can be useful is to find regions in the image of similar gray values. The output of a region growing method than would
be several masks, each mask corresponding to a (range of) gray value(s).
In our example it can be used to determine different height levels that can be found on a pallet.
Halcon offers multiple region growing methods. One of them is region_growing_mean, that works like described above. To perform this operation
the following code would be used:

.. code-block:: python

    output_regions = region_growing_mean(input_image, start_points_rows, start_points_columns, tolerance, minimum_mask_size)

The function takes a single channel image as input, as well as the seeds start locations as lists. It is also possible
to not add any start position by passing empty lists. The function will than start in the upper left corner of the image
and makes its way through the image. The input tolerance determines when a pixel is considered as part of the mask.
Masks smaller than the set minimum_mask_size will be removed from the output.


How to work with binary images / masks / regions
--------------------------------------------------
In the previous section, we talked about how to create masks. This section focuses on the processing of masks,
to either adapt them to your needs or to use them to extract information from an image.

Morphology
^^^^^^^^^^^^^
Morphology deals with the expansion and reduction of a mask. The two most basic operations are called
**erosion** and **dilation**.

Erosion and Dilation
**********************
For both operations, a "morphology structure" has to be defined. This can be a circle, a rectangle or more advanced shapes like a hexagonal.
In addition to its shape, the size must be defined. Now imagine this morphology structure being pulled around the masks outline pixels.
When performing a dilation, the structure would be pulled around the border of the mask, expanding the region according
to the structures shape and size. All pixels touched by the morphology structure will be added to the mask.
Erosion works the other way around. The structure will be also moved around the masks border.
All pixel touched by the structure will be unselected and the mask shrinks. Morphology is easily understandable when seeing examples.
Lets start with an unprocessed mask of the top of 3 KS-Quadro stones. The holes drilled in the stone are not part of the object
since they have different gray values. Also notice, that the mask is not complete and has some pixels, that are displayed black.
This happens if a non optimal threshold is selected. Also there is some "noise" in the upper right corner.

.. _ks-quadro-mask:

.. figure:: images/ks_quadro_mask.png
    :align: center
    :alt: KS-Quadro mask

    Incomplete mask of KS-Quadro stones. (*source:* own image)

Lets perform a dilation and a erosion operation with a structural element with the shape of a circle and a diameter of 5 pixels.

.. _example-erosion-dilation:

.. figure:: images/example_erosion_dilation.png
    :align: center
    :alt: Dilation and erosion applied to region.

    Applied dilation and erosion (*source:* own image)

As you can see, dilation expands the white areas in the image, erosion shrinks them (or expands the black areas). Also pay attention
to what happened to the noise. While dilation expanded the noise to bigger circles, erosion got completely rid of it.
Also the small gaps between the stones vanish when dilating the mask, while erosion makes them more dominant.

In halcon, dilation and erosion can be performed with the following code:

.. code-block:: python

    region_eroded / region_dilated  = dilation_circle(input_region, circle_radius) / dilation_circle(input_region, circle_radius)

.. _hint_opening_closing:

.. hint::
    In addition to dilation_circle, which uses a circle, there is also dilation_rectangle1, which uses a rectangular
    morphology structure. When simply calling erosion or dilation without any extras, an arbitrary shape can be passed.

Though erosion and dilation makes it very easy to reduce noise or fill holes in the region, they have fundamental flaws.
Using them will also result in a loss in information, since the region won't accurately represent the input region.
A better choice for removing noise or expanding gaps would be the operations **opening** and **closing**.

Opening and Closing
""""""""""""""""""""""""
Opening and closing are working in a similar way to erosion and dilation. In fact, they start with the basic operations
erosion and dilation but are followed by a subtraction (for closing) or a addition (for opening) of both the resulting
mask and the input mask. This results in two different effects.

When performing an opening operation, small objects (white pixels) will be removed from the image, while bigger areas stay mostly intact.
The edges of the remaining objects are slightly smoothed, orientated inwards. No pixels will be added to the image.

When performing an closing operation, small holes (black pixels) will be removed. Also the remaining objects borders
will be smoothed, this time directed outwards of the region.

Use theses operations in halcon by calling the function:

.. code-block:: python

    region_opened / region_closed = opening(input_mask, structural_element) / closing(input_mask, structural_element)

The same rules mentioned :ref:`above <hint_opening_closing>` apply.


Feature extraction with regions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Most of the time, the goal in image processing is, to extract certain features of an image. In most of the cases the features
we are looking for are only interesting in parts of the image. If we want to check the color of a certain part,
we first need to extract the part from the image (with a mask) and then check within this region what color is dominant,
which would then be the color of our part. This can be done by accessing the values of all pixels within the selected region.

To make use of the already introduced example from :ref:`above <ks-quadro-mask>`, we can check the gray values contained in this
region. In halcon, this is done by using the function gray_features. The function requires an input image, an input region as well as
the feature you want to extract.

.. code-block:: python

    gray_value = gray_features(input_region, input_image, feature)

Examples for possible features are the minimum gray value ('min'), the maximum gray value ('max') or the mean.
For our example, we get a minimum value of ***1300**, a maximum value of **1385** and a mean value of **1376**. This tells
us, that the mean distance of the stones to the camera is 1376 mm. Depending on the used mask, this values
can be more or less meaningful.

If we perform the same operation on the :ref:`dilated mask <example-erosion-dilation>` from earlier, we get the same minimum value
of **1300** but now have a maximum gray value of **2010** and a mean of **1420**. This example shows the importance of using
a accurate mask when extracting features from an image.

Other than using a mask for extracting gray values of certain image regions, the mask itself holds information that can be
interesting. If we want to examine a objects shape, there is no need to access the images gray values, since the shape of the mask
itself remains the same if the segmentation is done correctly. Same is true when comparing objects in size.
Halcon provides a function to extract features of regions like its area, a score for a predefined shape (like circularity) and many more thing.
It can be called by:

.. code-block:: python

    region_feature = region_features(input_region, feature)

In the next paragraph a method to detect edges in pointclouds utilizing masks will be shown.

Edge detection example for 3d data by utilizing masks
---------------------------------------------------------
This simple example shows how masks can be used to find the contours of an object from 3d data.
Lets start by showing the scene we are working with:

.. figure:: images/intensity_image_pointcloud_edges_example.png
    :align: center
    :alt: Intensity image edges example

    Intensity image of KS-Quadro stones on a pallet (*source*: own image)

We want to extract the edges of the single stone on top with methods introduced in this section.
First we use a simple threshold on the z-image to generate a mask, that clearly shows the top site of the stone.
For this, we select a suitable distance like described in paragraph :ref:`Threshold <threshold->`.
This gives us the following mask:

.. figure:: images/mask_pointcloud_edges_example.png
    :align: center
    :alt: Mask of top layer stone

    Mask of the upper stone (*source:* own image)

On this mask, we apply an erosion morphology using a circle of the size 2 as structuring element.
We than subtract the eroded mask from the original mask by calling:

.. code-block:: python

    difference_region = difference(original_mask, eroded_mask)

This results in a region looking like this:

.. figure:: images/result_pointcloud_edges_example.png
    :align: center
    :alt: Egdes of KS-Quadro stone

    Extracted edges of the KS-Quadro stone (*source:* own image)

As you can see, with only a view steps we were able to successfully extract the stones edges only using 3d data and basic
image processing operations. Obviously this is a very simple example where all thresholds and operations are hard coded and
dont leave room for any error. Also, this method is only possible if the object is isolated from any other objects with the same height.
Nonetheless, the idea behind using masks to extract edges is clear. This will be of importance later in the
:ref:`basic idea <basic-idea-fitting-stones>` of location fitting stones.

You now should have some basic understanding of the image processing world, that will help to understand the developed application and
what some of the problems in this project are.
The next part will get you started on what is necessary to use the application and how to contribute to it.